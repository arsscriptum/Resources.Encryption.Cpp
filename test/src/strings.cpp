//==============================================================================
//
//   strings.cpp
//
//   This file was generated the string encryption tool CXR.
//   https://github.com/arsscriptum/String.Encrypt.cpp
//
//
//                       ***DO NOT EDIT THIS FILE***
//   Any changes here will be overwritten on the next compilation.
//   You can edit: F:\Development2\Resources.Encryption.Cpp\test\src\strings.cxr
//
//==============================================================================

#include "stdafx.h"
#include "cxr_inc.h"

////////////////////
// a little comment
										 
											   
//==============================================================================
//   STRINGS DECLARATIONS
//==============================================================================

#ifdef _USING_CXR
const char* pString1 = "a4U21YOmiH4TEoD4DePnniGnEdhS0iHR";  // this is fun
#else // _USING_CXR
const char* pString1 = _CXR("AbcdEfg1234  blah\tblah");  // this is fun
#endif // _USING_CXR


// you can put comments anywhere 			 	 		 		 	  				 					   
  
//==============================================================================
//   STRINGS DECLARATIONS
//==============================================================================

#ifdef _USING_CXR
const char* pString2 = "a5C/+HxxbP2nei+8FvU5/GZmnKuRWojIarHj9+kq4nzPmAS7z5l96UxBTmrTI9DmEkfm7BR7EPjEpGR1J39NSggQYgm4Fd+F88DrkBGELa1D7wU=";
#else // _USING_CXR
const char* pString2 = _CXR("This is a long one, not that it should matter...blab blah blah blah. i love trash.");
#endif // _USING_CXR


// you can even put normal C++ code in this file
class fred
{
public:
	fred() {}
	~fred() {}																			 

private:							   
	int m_iFredsStuff;
};
// ... tho i don't know why you would want to	   			  	 				  


//==============================================================================
// generated decoder code below
//==============================================================================

#include <algorithm>
#include <string>
#include "Base64.h"


 //==============================================================================
 // the stream cipher
 //==============================================================================
 class CCXR 
 { 
 protected: 
    CCXR(const BYTE *key, unsigned int ks) 
    { 
       int i;BYTE rs;unsigned kp; 
       for(i=0;i<256;i++)c[i]=i;kp=0;rs=0;for(i=255;i;i--)std::swap(c[i],c[kr(i,key,ks,&rs,&kp)]);r2=c[1];r1=c[3];av=c[5];lp=c[7];lc=c[rs];rs=0;kp=0; 
    } 
       inline void SC(){BYTE st=c[lc];r1+=c[r2++];c[lc]=c[r1];c[r1]=c[lp];c[lp]=c[r2];c[r2]=st;av+=c[st];} 
       BYTE c[256],r2,r1,av,lp,lc;     
  
    BYTE kr(unsigned int lm, const BYTE *uk, BYTE ks, BYTE *rs, unsigned *kp) 
    { 
       unsigned rl=0,mk=1,u;while(mk<lm)mk=(mk<<1)+1;do{*rs=c[*rs]+uk[(*kp)++];if(*kp>=ks){*kp=0;*rs+=ks;}u=mk&*rs;if(++rl>11)u%=lm;}while(u>lm);return u; 
    } 
 }; 
  
 struct CXRD:CCXR 
 { 
       CXRD(const BYTE *userKey, unsigned int keyLength=16) : CCXR(userKey, keyLength) {} 
       inline BYTE pb(BYTE b){SC();lp=b^c[(c[r1]+c[r2])&0xFF]^c[c[(c[lp]+c[lc]+c[av])&0xFF]];lc=b;return lp;} 
 }; 


 //==============================================================================
 // the high-level decoding function
 //==============================================================================
 std::string __CXRDecrypt(const char* in, const char* pw) 
 { 
    std::vector<BYTE> db = base64_decode(in); 
    std::string is(reinterpret_cast<const char*>(&db[0]), db.size()); 
    std::vector<BYTE> bos; 
    CXRD sap((const BYTE*)pw, strlen(pw)); 
    for (unsigned int i = 0; i < is.length(); i++){ 
        char c = (char)(sap.pb((BYTE)(is.at(i)))); 
        if (i > 0) { bos.push_back(c); } 
    } 
    std::string x(reinterpret_cast<const char*>(&bos[0]), bos.size()); 
    return x; 
}
